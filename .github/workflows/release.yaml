# The docker image has already been built - when the PR was merged to main - and it tagged as 'main'.
# All we need to do here for a "release" is to re-tag the 'main' image and push it to docker hub.concurrency.

name: Release new version

env:
  DOCKER_IMAGE_NAME: bp3global/wm-extract-deploy
  GITHUB_IMAGE_NAME: ghcr.io/bp3/wm-extract-deploy

on:
  # We only want to run when the user creates a release through the UI
  release:
    types:
      - published

jobs:
  release:
    runs-on: ubuntu-latest
    steps:

#      # Don't think that we need anything from the repository
#      - name: Checkout repository
#        uses: actions/checkout@v4

# We certainly don't need to build the image
#      # Build the docker image and apply the tag
#      - name: Build Docker image of application
#        run: |
#          docker build -t $DOCKER_IMAGE_NAME:$GITHUB_REF_NAME .

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Pull the docker image and apply the tag
      - name: Pull Docker image of application
        run: |
          docker pull $GITHUB_IMAGE_NAME:main

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: bp3docker
          password: ${{ secrets.DOCKERHUB_BP3DOCKER }}

      - name: Tag image and push to local registry
        run: |
          docker tag $GITHUB_IMAGE_NAME:main $GITHUB_IMAGE_NAME:$GITHUB_REF_NAME
          docker push $GITHUB_IMAGE_NAME:$GITHUB_REF_NAME

      - name: Tag and push image to Docker Hub
        run: |
          docker tag $GITHUB_IMAGE_NAME:$GITHUB_REF_NAME $DOCKER_IMAGE_NAME:$GITHUB_REF_NAME
          docker tag $GITHUB_IMAGE_NAME:$GITHUB_REF_NAME $DOCKER_IMAGE_NAME:latest
          docker push $DOCKER_IMAGE_NAME:$GITHUB_REF_NAME
          docker push $DOCKER_IMAGE_NAME:latest
